@using System.Linq
@using TaskManagerWebsite.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using TaskManagerWebsite.ViewModels
@inject IJSRuntime JsRuntime

<input type="text" @bind="searchText" @bind:event="oninput" placeholder="Search managers..." class="form-control mb-2" />

<select @bind="selectedManagerId" @bind:after="OnManagerChanged" class="form-control">
    <option value="">-- Select a Manager --</option>
    @foreach (var manager in FilteredManagers)
    {
        <option value="@manager.Id">@manager.UserName (@manager.Email)</option>
    }
</select>

<input type="text" name="SelectedManagerId" @bind="selectedManagerId" class="visually-hidden" />

@code {
    [Parameter]
    public List<User> Managers { get; set; } = new List<User>();
    
    [Parameter]
    public int? SelectedManagerId { get; set; }

    [Parameter]
    public EventCallback<int?> SelectedManagerIdChanged { get; set; }

    private int? selectedManagerId
    {
        get => SelectedManagerId;
        set
        {
            if (SelectedManagerId != value)
            {
                SelectedManagerId = value;
                SelectedManagerIdChanged.InvokeAsync(value);
            }
        }
    }

    private string searchText = "";

    private IEnumerable<User> FilteredManagers =>
        string.IsNullOrWhiteSpace(searchText)
            ? Managers
            : Managers.Where(m =>
                m.UserName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                m.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    private async Task OnManagerChanged()
    {
        await JsRuntime.InvokeVoidAsync("clearValidationError", "SelectedManagerId");
    }
}