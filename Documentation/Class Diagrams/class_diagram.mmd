---
config:
  theme: default
  themeVariables:
    primaryColor: '#d6d6d6'
    primaryTextColor: '#222222'
    primaryBorderColor: '#666666'
    tertiaryColor: '#f8f9fa'
    edgeLabelBackground: '#ffffff'
    secondaryColor: '#c0c0c0'
    tertiaryTextColor: '#333333'
  flowchart:
    title: "TaskManagerWebsite"
    defaultRenderer: elk
    curve: linear
    nodeSpacing: 0
    rankSpacing: 300
  layout: elk
  look: neo
---

classDiagram
direction TB

%% ------------------- NAMESPACES AND CLASSES ------------------- %%

namespace Controllers {
    class AdminController {
        +AdminController(ApplicationDbContext context, UserManager<User> userManager, RoleManager<IdentityRole<int>> roleManager)
        +Task<IActionResult> Users()
        +IActionResult UserAdd()
        +Task<IActionResult> UserAdd(UserViewModel model)
        +Task<IActionResult> UserDetails(int id)
        +Task<IActionResult> Groups()
        +IActionResult CreateGroup()
        +Task<IActionResult> CreateGroup(GroupViewModel model)
        +Task<IActionResult> DeleteGroup(int id)
        +Task<IActionResult> GroupDetails(int id)
        +Task<IActionResult> AddUserToGroup(int groupId, int userId)
        +Task<IActionResult> RemoveUserFromGroup(int groupId, int userId)
        +Task<IActionResult> AddManagerToGroup(int groupId, int managerId, bool isPrimary)
        +Task<IActionResult> ChangeManager(int groupId, int newManagerId)
        +Task<IActionResult> Projects()
        +Task<IActionResult> CreateProject()
        +Task<IActionResult> CreateProject(CreateProjectViewModel model)
        +Task<IActionResult> ProjectDetails(int id)
        +Task<IActionResult> AssignGroupToProject(int projectId, int groupId)
        +Task<IActionResult> RemoveGroupFromProject(int projectId, int groupId)
        +Task<IActionResult> EditProject(int id)
        +Task<IActionResult> EditProject(int id, Project project)
        +Task<IActionResult> DeleteProject(int id)
        +Task<IActionResult> UserEdit(string id)
        +Task<IActionResult> UserEdit(string id, string userName, string email, string role)
        +Task<IActionResult> UserDelete(int id)
        +Task<IActionResult> DeleteConfirmed(int id)
    }

    class EmployeeController {
        +EmployeeController(ApplicationDbContext context, UserManager<User> userManager, RoleManager<IdentityRole<int>> roleManager)
        +Task<IActionResult> Users()
        +Task<IActionResult> Groups()
        +Task<IActionResult> GroupDetails(int id)
        +Task<IActionResult> AddUserToGroup(int groupId, int userId)
        +Task<IActionResult> RemoveUserFromGroup(int groupId, int userId)
        +Task<IActionResult> ChangeManager(int groupId, int newManagerId)
        +Task<IActionResult> Projects()
        +Task<IActionResult> CreateProject()
        +Task<IActionResult> CreateProject(CreateProjectViewModel model)
        +Task<IActionResult> ProjectDetails(int id)
        +Task<IActionResult> EditProject(int id)
        +Task<IActionResult> EditProject(int id, Project project)
        +Task<IActionResult> DeleteProject(int id)
        +Task<IActionResult> RequestGroupToProject(int projectId, int groupId)
        +Task<IActionResult> AssignGroupToProject(int projectId, int groupId)
        +Task<IActionResult> RemoveGroupFromProject(int projectId, int groupId)
        +Task<IActionResult> AcceptRequest(int requestId)
        +Task<IActionResult> DenyRequest(int requestId)
        +Task<IActionResult> DeleteGroupRequest(int requestId)
    }

    class FindUsernameController {
        +FindUsernameController(EmailService emailService, UserManager<User> userManager)
        +IActionResult Index()
        +Task<IActionResult> Index(string email)
    }

    class ForgotPasswordController {
        +ForgotPasswordController(EmailService emailService, UserManager<User> userManager)
        +IActionResult Index()
        +Task<IActionResult> Index(ForgotPasswordViewModel model)
    }

    class HomeController {
        +HomeController(ILogger<HomeController> logger)
        +Task<IActionResult> Index()
        +IActionResult AccessDenied()
        +IActionResult Error()
    }

    class LoginController {
        +LoginController(UserManager<User> userManager, SignInManager<User> signInManager)
        +Task<IActionResult> Index()
        +Task<IActionResult> Index(LoginViewModel model, string? returnUrl)
        +Task<IActionResult> Logout()
    }

    class ProjectController {
        +ProjectController(ApplicationDbContext context, UserManager<User> userManager)
        +Task<IActionResult> ProjectBoard(int id)
        +Task<IActionResult> ProjectBoard(int id, ProjectBoardViewModel vm)
        +Task<IActionResult> EditStage(int stageId)
        +Task<IActionResult> EditStage(StageEditViewModel vm)
        +Task<IActionResult> DeleteStage(int stageId)
        -void ForceProjectValid(ModelStateDictionary modelState)
    }
}

namespace Models {
    class User {
        +int Id
        +string UserName
        +string Email
        +ICollection<UserGroup> UserGroups
    }

    class UserGroup {
        +int UserId
        +User User
        +int GroupId
        +Group Group
        +string Role
    }

    class Group {
        +int Id
        +string Name
        +string Description
        +int? ManagerId
        +User? Manager
        +ICollection<UserGroup> UserGroups
        +ICollection<GroupManager> Managers
        +ICollection<GroupProject> GroupProjects
    }

    class GroupManager {
        +int UserId
        +User User
        +int GroupId
        +Group Group
    }

    class Project {
        +int Id
        +string Name
        +string Description
        +int ProjectLeadId
        +User ProjectLead
        +int? ProjectCreatorId
        +ProjectBoard? ProjectBoard
        +ICollection<GroupProject> ProjectGroups
    }

    class GroupProject {
        +int ProjectId
        +Project Project
        +int GroupId
        +Group Group
    }

    class GroupRequest {
        +int Id
        +int SenderId
        +int GroupId
        +Group Group
        +int ProjectId
        +Project Project
        +bool? Response
    }

    class Stage {
        +int Id
        +string Name
        +int Position
        +int ProjectBoardId
        +ProjectBoard ProjectBoard
        +int? CreatorGroupId
        +Group? CreatorGroup
        +int CreatorUserId
        +User CreatorUser
        +int? AssignedGroupId
        +Group AssignedGroup
    }

    class ProjectBoard {
        +int Id
        +int ProjectId
        +Project Project
        +int BoardCreatorId
        +User BoardCreator
        +ICollection<Stage> Stages
    }

    class Admin {
        +int UserId
        +User User
    }
}

namespace Database {
    class ApplicationDbContext {
        +DbSet Users
        +DbSet Admins
        +DbSet Groups
        +DbSet UserGroups
        +DbSet GroupManagers
        +DbSet Projects
        +DbSet GroupProjects
        +DbSet GroupRequests
        +DbSet ProjectBoards
        +DbSet Stages
    }
}

namespace Services {
    class EmailService {
        - IConfiguration _configuration
        +EmailService()
        +EmailService(IConfiguration configuration)
        +Task SendEmailAsync(string toEmail, string subject, string body)
    }
}

namespace ViewModels {
    class ErrorViewModel {
        +string? RequestId
        +bool ShowRequestId()
    }

    class UserViewModel {
        +string UserName
        +string Email
        +string Password
        +string ConfirmPassword
    }

    class UserDeleteViewModel {
        +User User
        +List<Group> RelatedGroups
        +List<Project> RelatedProjects
    }

    class RegisterViewModel {
        +string UserName
        +string Email
        +string Password
        +string ConfirmPassword
    }

    class LoginViewModel {
        +string UserName
        +string Password
    }

    class GroupViewModel {
        +string Name
        +string Description
        +int SelectedManagerId
        +List<int> SelectedUserIds
    }

    class ForgotPasswordViewModel {
        +string Username
        +string Password
        +string ConfirmPassword
    }

    class FindUsernameViewModel {
        +string Email
    }

    class CreateProjectViewModel {
        +string ProjectName
        +string Description
    }

    class ProjectBoardViewModel {
        +string BoardName
    }

    class StageEditViewModel {
        +int StageId
        +string StageName
    }
}

namespace Authorization {
    class UserRoleRequirement {
        +string RequiredRole
    }
    
    class UserRoleHandler {
        +HandleRequirementAsync(AuthorizationHandlerContext context, UserRoleRequirement requirement)
    }
    
    class UserRelationshipRequirement {
        +string RequiredRelationship
    }
    
    class UserRelationshipHandler {
        -ApplicationDbContext _context
        +HandleRequirementAsync(AuthorizationHandlerContext context, UserRelationshipRequirement requirement, User targetUser)
    }
    
    class ProjectRoleRequirement {
        +string RequiredRole
    }
    
    class ProjectRoleHandler {
        -ApplicationDbContext _context
        +HandleRequirementAsync(AuthorizationHandlerContext context, ProjectRoleRequirement requirement, int projectId)
    }
    
    class GroupRoleRequirement {
        +string RequiredRole
    }
}

%% ------------------- RELATIONSHIPS / REFERENCES WITH VARIED ARROWS ------------------- %%

%% Controllers -> Models / Services / ViewModels

Controllers.AdminController ..> Models.User : "Performs CRUD on Users"
Controllers.AdminController ..> Models.Group : "Performs CRUD on Groups"
Controllers.AdminController ..> Models.Project : "Performs CRUD on Projects"
Controllers.AdminController ..> ViewModels.UserViewModel : "Populates user creation/edit data"
Controllers.AdminController ..> ViewModels.GroupViewModel : "Populates group creation data"
Controllers.AdminController ..> ViewModels.CreateProjectViewModel : "Populates project creation data"
Controllers.AdminController ..> Database.ApplicationDbContext : "Depends on for data access"
Controllers.AdminController ..> Microsoft.AspNetCore.Identity.UserManager : "Manages user identity"
Controllers.AdminController ..> Microsoft.AspNetCore.Identity.RoleManager : "Manages role identity"

Controllers.EmployeeController ..> Models.User : "Reads/updates user info"
Controllers.EmployeeController ..> Models.Group : "CRUD on Groups"
Controllers.EmployeeController ..> Models.Project : "CRUD on Projects"
Controllers.EmployeeController ..> ViewModels.CreateProjectViewModel : "Uses for project creation"
Controllers.EmployeeController ..> Database.ApplicationDbContext : "Depends on for EF data"
Controllers.EmployeeController ..> Microsoft.AspNetCore.Identity.UserManager : "Relies on for identity"
Controllers.EmployeeController ..> Microsoft.AspNetCore.Identity.RoleManager : "Relies on for roles"

Controllers.FindUsernameController ..> Services.EmailService : "Sends user info email"
Controllers.FindUsernameController ..> Microsoft.AspNetCore.Identity.UserManager : "Fetches user data"
Controllers.FindUsernameController ..> Models.User : "Retrieves user record"

Controllers.ForgotPasswordController ..> Services.EmailService : "Sends reset link"
Controllers.ForgotPasswordController ..> Microsoft.AspNetCore.Identity.UserManager : "Validates identity"
Controllers.ForgotPasswordController ..> ViewModels.ForgotPasswordViewModel : "Handles forgot-password form data"
Controllers.ForgotPasswordController ..> Models.User : "Obtains user account"

Controllers.HomeController ..> Microsoft.Extensions.Logging.ILogger : "Logs system events"
Controllers.HomeController ..> ViewModels.ErrorViewModel : "Displays error details"

Controllers.LoginController ..> Microsoft.AspNetCore.Identity.UserManager : "Handles user credentials"
Controllers.LoginController ..> Microsoft.AspNetCore.Identity.SignInManager : "Performs sign-in/out"
Controllers.LoginController ..> ViewModels.LoginViewModel : "Captures login data"
Controllers.LoginController ..> Models.User : "Fetches and authenticates user"

Controllers.ProjectController ..> Database.ApplicationDbContext : "Updates/queries"
Controllers.ProjectController ..> Microsoft.AspNetCore.Identity.UserManager : "Identifies project users"
Controllers.ProjectController ..> Models.Project : "Manages project entity"
Controllers.ProjectController ..> Models.ProjectBoard : "Controls project board entity"
Controllers.ProjectController ..> Models.Stage : "Creates/edits stage entity"
Controllers.ProjectController ..> ViewModels.ProjectBoardViewModel : "View model for boards"
Controllers.ProjectController ..> ViewModels.StageEditViewModel : "View model for editing stage"


%% Database -> Models

Database.ApplicationDbContext --o Models.User : "Aggregation of user entities (DbSet)"
Database.ApplicationDbContext --o Models.Admin : "Aggregation of admin entities (DbSet)"
Database.ApplicationDbContext --o Models.Group : "Aggregation of group entities (DbSet)"
Database.ApplicationDbContext --o Models.UserGroup : "Aggregation of user-group memberships"
Database.ApplicationDbContext --o Models.GroupManager : "Aggregation of manager assignments"
Database.ApplicationDbContext --o Models.Project : "Aggregation of projects"
Database.ApplicationDbContext --o Models.GroupProject : "Aggregation of group-project links"
Database.ApplicationDbContext --o Models.GroupRequest : "Stores group requests"
Database.ApplicationDbContext --o Models.ProjectBoard : "Stores project boards"
Database.ApplicationDbContext --o Models.Stage : "Stores stages"


%% Models -> Models

Models.UserGroup --* Models.User : "Belongs to exactly one User"
Models.UserGroup --* Models.Group : "Belongs to exactly one Group"

Models.GroupManager --* Models.Group : "Manager assignment belongs to a Group"
Models.GroupManager --* Models.User : "Manager assignment references one User"

Models.GroupRequest ..> Models.User : "Request initiated by a user"

Models.Project --> Models.ProjectBoard : "One project can have a board"
Models.Project --o Models.GroupProject : "Linked to groups through GroupProject"
Models.Group --o Models.GroupProject : "Linked to projects through GroupProject"

Models.GroupRequest ..> Models.Group : "References target group"
Models.GroupRequest ..> Models.Project : "References target project"

Models.ProjectBoard --* Models.Stage : "Stage composition in a board"
Models.Stage ..> Models.User : "References the user who created it"
Models.Stage ..> Models.Group : "May assign a group"


%% Other model relationships

Models.Admin ..> Models.User : "Points to a user account with admin rights"


%% Services

Services.EmailService ..> Microsoft.Extensions.Configuration.IConfiguration : "Reads mail settings"
Services.EmailService ..> MimeKit.MimeMessage : "Builds email message"
Services.EmailService ..> MailKit.Net.Smtp.SmtpClient : "Sends via SMTP"


%% ViewModels

ViewModels.UserDeleteViewModel ..> Models.User : "Displays user to be deleted"
ViewModels.UserDeleteViewModel ..> Models.Group : "Shows related groups"
ViewModels.UserDeleteViewModel ..> Models.Project : "Shows related projects"

ViewModels.GroupViewModel ..> Models.Group : "Used to create or edit groups"

ViewModels.ForgotPasswordViewModel ..> ViewModels.LoginViewModel : "Validates credentials in flow"


%% Authorization

Authorization.UserRoleHandler ..> Authorization.UserRoleRequirement : "Consumes role requirement"

Authorization.UserRelationshipHandler ..> Authorization.UserRelationshipRequirement : "Consumes relationship requirement"
Authorization.UserRelationshipHandler ..> Models.User : "Checks the target user"

Authorization.ProjectRoleHandler ..> Authorization.ProjectRoleRequirement : "Consumes project role requirement"
Authorization.ProjectRoleHandler ..> Database.ApplicationDbContext : "Queries project data"

%% The user asked for "GroupRoleRequirement --> Authorization.ProjectRoleHandler : extends" – 
%% We'll treat it as a dependency with clarifying text:
Authorization.GroupRoleRequirement ..> Authorization.ProjectRoleHandler : "Extends logic for handling group roles"

%% Show inheritance (if needed) for roles:
Authorization.GroupRoleRequirement <|-- Authorization.UserRoleRequirement : "Inherits from user role requirement"
