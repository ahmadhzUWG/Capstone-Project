@model TaskManagerWebsite.Models.Group

<link href="~/css/admin_createGroups.css" rel="stylesheet" />

<h1>Create Group</h1>

<form id="createGroupForm" asp-action="CreateGroup" asp-controller="Admin" method="post">
    <div class="form-group">
        <label asp-for="Name">Group Name</label>
        <input asp-for="Name" class="form-control" required />
        <span asp-validation-for="Name" class="text-danger"></span>

        <br />

        <label asp-for="Description">Group Description</label>
        <input asp-for="Description" class="form-control" required />
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <br />

    <div class="form-group">
        <label>Select Managers</label>
        <input type="text" id="searchBoxManagers" class="form-control mb-2" placeholder="Search managers...">

        <div id="managerContainer">
            @foreach (var user in ViewBag.Managers ?? new List<User>())
            {
                <div class="form-check manager-box d-flex align-items-center justify-content-between">
                    <!-- Manager Selection -->
                    <div class="d-flex align-items-center">
                        <input type="checkbox" name="selectedManagers" value="@user.Id" class="form-check-input manager-checkbox me-2" id="manager-@user.Id" />
                        <label class="form-check-label me-3" for="manager-@user.Id">@user.UserName (@user.Email)</label>
                    </div>

                    <!-- Primary Manager Selection -->
                    <div class="d-flex align-items-center">
                        <input type="radio" name="primaryManagerId" value="@user.Id" class="form-check-input primary-manager-radio me-2" disabled />
                        <span class="text-muted">Primary Manager</span>
                    </div>
                </div>
            }
        </div>
    </div>

    <br />

    <div class="form-group">
        <label>Select Employees</label>
        <input type="text" id="searchBoxEmployees" class="form-control mb-2" placeholder="Search employees...">

        <div id="employeeContainer">
            @foreach (var user in ViewBag.Employees ?? new List<User>())
            {
                <div class="form-check employee-box">
                    <input type="checkbox" name="selectedUsers" value="@user.Id" class="form-check-input employee-checkbox" />
                    <label class="form-check-label">@user.UserName (@user.Email)</label>
                </div>
            }
        </div>
    </div>

    <br />

    <!-- Hidden Input for Primary Manager ID -->
    <input type="hidden" id="primaryManagerHidden" name="primaryManagerId" value="" />

    <button type="submit" class="btn btn-success">Create</button>
</form>

<br />
<a href="@Url.Action("Groups", "Admin")" class="btn btn-secondary">Back to Groups</a>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let managerCheckboxes = document.querySelectorAll(".manager-checkbox");
            let primaryManagerRadios = document.querySelectorAll(".primary-manager-radio");
            let hiddenPrimaryManagerInput = document.getElementById("primaryManagerHidden");

            function updatePrimaryManagerSelection() {
                let selectedManagers = Array.from(managerCheckboxes).filter(c => c.checked);
                primaryManagerRadios.forEach(radio => {
                    radio.disabled = !selectedManagers.some(m => m.value === radio.value);
                });

                let selectedPrimary = Array.from(primaryManagerRadios).find(r => r.checked);
                if (!selectedPrimary && selectedManagers.length > 0) {
                    let firstAvailable = primaryManagerRadios.find(radio => !radio.disabled);
                    if (firstAvailable) {
                        firstAvailable.checked = true;
                        hiddenPrimaryManagerInput.value = firstAvailable.value;
                    }
                }
            }

            managerCheckboxes.forEach((checkbox) => {
                checkbox.addEventListener("change", function () {
                    updatePrimaryManagerSelection();
                });
            });

            primaryManagerRadios.forEach(radio => {
                radio.addEventListener("change", function () {
                    if (this.checked) {
                        hiddenPrimaryManagerInput.value = this.value;
                    }
                });
            });

            document.getElementById("createGroupForm").addEventListener("submit", function (event) {
    let managerCheckboxes = document.querySelectorAll(".manager-checkbox");
    let primaryManagerRadios = document.querySelectorAll(".primary-manager-radio");

    let selectedManagers = Array.from(managerCheckboxes).filter(c => c.checked);
    let selectedPrimaryManager = Array.from(primaryManagerRadios).find(r => r.checked);

    if (selectedManagers.length === 0) {
        alert("Please select at least one Manager.");
        event.preventDefault();
        return;
    }

    if (!selectedPrimaryManager) {
        alert("Please select a Primary Manager.");
        event.preventDefault();
        return;
    }
        });

        });

    </script>

    <!-- JavaScript for Search Functionality -->
    <script>
        function setupSearch(inputId, containerId) {
            document.getElementById(inputId).addEventListener("keyup", function () {
                let searchValue = this.value.toLowerCase();
                let checkboxes = document.querySelectorAll("#" + containerId + " .form-check");

                let hasVisibleUsers = false;

                checkboxes.forEach(function (check) {
                    let label = check.textContent.toLowerCase();
                    let isVisible = label.includes(searchValue);
                    check.style.display = isVisible ? "block" : "none";
                    if (isVisible) hasVisibleUsers = true;
                });

                // Hide the container if no users match the search
                document.getElementById(containerId).style.display = hasVisibleUsers ? "block" : "none";
            });
        }

        setupSearch("searchBoxManagers", "managerContainer");
        setupSearch("searchBoxEmployees", "employeeContainer");

    </script>
}