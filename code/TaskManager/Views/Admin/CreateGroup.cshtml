@model TaskManagerWebsite.ViewModels.GroupViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="/css/Admin/createGroups.css" />

<div class="container">
    <div class="form-container">
        <h1 class="text-center">Create Group</h1>

        <form id="createGroupForm" asp-action="CreateGroup" asp-controller="Admin" method="post" class="needs-validation" novalidate>
            <div class="form-group">
                <label asp-for="Name">Group Name</label>
                <input asp-for="Name" class="form-control" required />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Description">Group Description</label>
                <input asp-for="Description" class="form-control" required />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label>Select Manager</label>
                <input type="text" id="searchBoxManagers" class="form-control mb-2" placeholder="Search managers...">
                <select asp-for="SelectedManagerId" id="managerDropdown" class="form-control">
                    <option value="">-- Select a Manager --</option>
                    @foreach (var user in ViewBag.Employees ?? new List<User>())
                    {
                        <option value="@user.Id" class="manager-option" data-user-id="@user.Id">@user.UserName (@user.Email)</option>
                    }
                </select>
                <span asp-validation-for="SelectedManagerId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label>Select Employees</label>
                <div id="employeeContainer" class="employee-list">
                    @foreach (var user in ViewBag.Employees ?? new List<User>())
                    {
                        <div class="form-check employee-box" data-user-id="@user.Id">
                            <input type="checkbox" name="SelectedUserIds" value="@user.Id" class="form-check-input employee-checkbox"
                            @(Model?.SelectedUserIds != null && Model.SelectedUserIds.Contains(user.Id) ? "checked" : "") />
                            <label class="form-check-label">@user.UserName (@user.Email)</label>
                        </div>
                    }
                </div>
            </div>

            <button type="submit" class="btn btn-success btn-block mt-3">Create</button>
        </form>

        <a href="@Url.Action("Groups", "Admin")" class="btn btn-secondary btn-block mt-2">Back to Groups</a>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        function setupDropdownSearch(inputId, dropdownId) {
            document.getElementById(inputId).addEventListener("keyup", function () {
                let searchValue = this.value.toLowerCase();
                let options = document.querySelectorAll("#" + dropdownId + " .manager-option");
                options.forEach(function (option) {
                    let isVisible = option.textContent.toLowerCase().includes(searchValue);
                    option.style.display = isVisible ? "block" : "none";
                });
            });
        }

        function setupSearch(inputId, containerId) {
            document.getElementById(inputId).addEventListener("keyup", function () {
                let searchValue = this.value.toLowerCase();
                let checkboxes = document.querySelectorAll("#" + containerId + " .employee-box");
                checkboxes.forEach(function (box) {
                    let label = box.querySelector(".form-check-label").textContent.toLowerCase();
                    let isHidden = box.style.display === "none";
                    box.style.display = label.includes(searchValue) && !isHidden ? "block" : "none";
                });
            });
        }

        document.getElementById("managerDropdown").addEventListener("change", function () {
            let selectedManagerId = this.value;
            let employeeCheckboxes = document.querySelectorAll(".employee-box");

            employeeCheckboxes.forEach(function (box) {
                let checkbox = box.querySelector(".employee-checkbox");
                let userId = box.getAttribute("data-user-id");

                if (userId === selectedManagerId) {
                    checkbox.checked = false;
                    box.style.display = "none";
                } else {
                    box.style.display = "block";
                }
            });
        });

        document.querySelectorAll(".employee-checkbox").forEach(function (checkbox) {
            checkbox.addEventListener("change", function () {
                let userId = this.value;
                let managerOption = document.querySelector("#managerDropdown option[data-user-id='" + userId + "']");

                if (this.checked) {
                    if (managerOption) {
                        managerOption.style.display = "none";
                        if (managerOption.selected) {
                            document.getElementById("managerDropdown").value = "";
                        }
                    }
                } else {
                    if (managerOption) {
                        managerOption.style.display = "block";
                    }
                }
            });
        });

        setupDropdownSearch("searchBoxManagers", "managerDropdown");
        setupSearch("searchBoxEmployees", "employeeContainer");
    </script>
}
