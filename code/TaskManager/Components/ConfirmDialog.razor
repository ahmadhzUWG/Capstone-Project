@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

@if (IsVisible)
{
    <div class="modal show" tabindex="1" style="display:block; background: rgba(0,0,0,0.5); z-index:2050;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" @onclick="() => Confirm(false)"></button>
                </div>
                <div class="modal-body">
                    <p>@Message</p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => Confirm(false)">Cancel</button>
                    <button class="btn btn-danger" @onclick="() => Confirm(true)">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Title { get; set; } = "Confirm";
    [Parameter] public string Message { get; set; } = "Are you sure you want to delete this group?";
    [Parameter] public EventCallback<bool> OnConfirm { get; set; }

    private bool IsVisible { get; set; }
    private ElementReference modalDiv;

    private static ConfirmDialog Instance { get; set; }

    protected override void OnInitialized()
    {
        Instance = this;
    }

    public void Show()
    {
        IsVisible = true;
        StateHasChanged();
    }

    private async Task Confirm(bool confirmed)
    {
        Console.WriteLine($"Confirm clicked with: {confirmed}");
        IsVisible = false;
        StateHasChanged();
        await OnConfirm.InvokeAsync(confirmed);
    }

    [JSInvokable]
    public static Task ShowConfirmDialog()
    {
        Instance?.Show();
        return Task.CompletedTask;
    }

}
