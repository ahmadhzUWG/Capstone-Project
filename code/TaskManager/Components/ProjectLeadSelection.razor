@using System.Linq
@using TaskManagerWebsite.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using TaskManagerWebsite.ViewModels
@inject IJSRuntime JsRuntime

<input type="text" @bind="searchText" @bind:event="oninput" placeholder="Search project leads..." class="form-control mb-2" />

<select @bind="selectedProjectLeadId" @bind:after="OnProjectLeadChanged" class="form-control">
    <option value="0">-- Select a Project Lead --</option>
    @foreach (var lead in FilteredProjectLeads)
    {
        <option value="@lead.Id">@lead.UserName (@lead.Email)</option>
    }
</select>

<input type="text" name="SelectedProjectLeadId" @bind="selectedProjectLeadId" class="visually-hidden" />

@code {
    [Parameter]
    public List<User> ProjectLeads { get; set; } = new List<User>();

    [Parameter]
    public int SelectedProjectLeadId { get; set; }

    [Parameter]
    public EventCallback<int> SelectedProjectLeadIdChanged { get; set; }

    private int selectedProjectLeadId
    {
        get => SelectedProjectLeadId;
        set
        {
            if (SelectedProjectLeadId != value)
            {
                SelectedProjectLeadId = value;
                SelectedProjectLeadIdChanged.InvokeAsync(value);
            }
        }
    }

    private string searchText = "";

    private IEnumerable<User> FilteredProjectLeads =>
        string.IsNullOrWhiteSpace(searchText)
            ? ProjectLeads
            : ProjectLeads.Where(
                l => l.UserName.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                l.Email.Contains(searchText, StringComparison.OrdinalIgnoreCase));

    private async Task OnProjectLeadChanged()
    {
        await JsRuntime.InvokeVoidAsync("clearValidationError", "SelectedProjectLeadId");
    }
}