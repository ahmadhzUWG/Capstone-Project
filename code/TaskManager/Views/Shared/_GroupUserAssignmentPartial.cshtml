@model TaskManagerWebsite.Models.Group
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService AuthorizationService
@using System.Linq

@{
    var groupUsers = ViewBag.GroupUsers as List<UserGroup>;
}

<div id="group-assignment-container">
    <div class="group-section">
        <h3>Employees in this Group</h3>
        @if (groupUsers != null && groupUsers.Any())
        {
            <ul class="tm-group-list">
                @foreach (var userGroup in ViewBag.GroupUsers)
                {
                    <li class="tm-group-item">
                        @userGroup.User.UserName (@userGroup.User.Email)
                        @if ((await AuthorizationService.AuthorizeAsync(User, ViewBag.UserId, "IsManager")).Succeeded
                       || (await AuthorizationService.AuthorizeAsync(User, ViewBag.UserId, "IsAdmin")).Succeeded)
                        {
                            @if (userGroup.UserId != Model.ManagerId)
                            {
                                <form asp-action="RemoveUserFromGroup" method="post"
                                      data-ajax="true"
                                      data-ajax-method="POST"
                                      data-ajax-success="refreshGroupAssignment"
                                      data-ajax-failure="groupActionFailed"
                                      class="tm-inline-form">
                                    @Html.AntiForgeryToken()
                                    <input type="hidden" name="groupId" value="@Model.Id" />
                                    <input type="hidden" name="userId" value="@userGroup.UserId" />
                                    <button type="submit" class="tm-btn tm-btn--danger tm-btn--small">Remove</button>
                                </form>
                            }
                        }
                        else
                        {
                            <span class="tm-badge tm-badge--info">Manager</span>
                        }
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="tm-no-groups">No employees assigned to this group.</p>
        }
    </div>

    @if ((await AuthorizationService.AuthorizeAsync(User, ViewBag.UserId, "IsManager")).Succeeded
    || (await AuthorizationService.AuthorizeAsync(User, ViewBag.UserId, "IsAdmin")).Succeeded)
    {
        <div class="group-section">
            <h3>Add Employee to Group</h3>
            <form id="addEmployeeForm" asp-action="AddUserToGroup" method="post"
                  data-ajax="true"
                  data-ajax-method="POST"
                  data-ajax-success="refreshGroupAssignment"
                  data-ajax-failure="groupActionFailed">
                @Html.AntiForgeryToken()
                <input type="hidden" name="groupId" value="@Model.Id" />
                <label for="userId">Select Employee:</label>
                <select name="userId" class="tm-form__input">
                    @if (groupUsers != null)
                    {
                        @foreach (var user in ViewBag.Users)
                        {
                            <option value="@user.Id">@user.UserName (@user.Email)</option>
                        }
                    }
                    else
                    {
                        <option value="" disabled>No available employees</option>
                    }
                </select>
                <button type="submit" class="tm-btn tm-btn--success" style="margin-top: 10px;"
                @(ViewBag.Users != null && ViewBag.Users.Count == 0 ? "disabled" : "")>
                    Add Employee
                </button>
            </form>
        </div>
    }
</div>
